{"meta":{"title":"ehZyiL的博客","subtitle":"","description":"ehZyiL的博客","author":"ehZyiL","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2020-07-25T12:29:35.000Z","updated":"2021-09-04T08:40:16.004Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-08-25T12:28:15.000Z","updated":"2021-09-04T08:40:50.900Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-09-01T12:30:26.000Z","updated":"2021-09-04T08:47:18.540Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""}],"posts":[{"title":"软件项目管理笔记","slug":"软件项目管理","date":"2021-09-03T09:30:46.000Z","updated":"2021-09-04T15:54:55.674Z","comments":true,"path":"2021/09/03/软件项目管理/","link":"","permalink":"http://example.com/2021/09/03/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","excerpt":"","text":"软件项目管理 持续更新~ 第 1 章 软件项目管理概述1.1 项目与软件项目定义项目(Project)是为了创造一个唯一的产品或提供一 个唯一的服务而进行的临时性的努力。 项目的目标 成果性目标 约束性目标 项目的目标的特性不同优先级 项目约束性目标包括进度、成本、范围和质量，简称为项目目标三角形。除了这4个制约因素之外，还加上了风险和资源，并且最终要让客户满意。在实际项目中，他们之间的优先顺序通常由管理层决定。 层次性 明确定义的项目目标按其意义和内容表示为一个层次结构，而且越较低层次的目标应该描述越清晰具体。清晰界定的某一层次目标通常直接作为初步的项目范围基准。 项目的特征特征 有明确的目标 项目之间的活动具有相关性 限定的周期 有独特性 资源成本的约束性 项目的不确定性 **项目的三大特点：临时性、独特性和渐进明细性。** 软件项目软件是计算机系统中与硬件相互依存的部分,它是包括程序、数据及相关文档的完整集合. 软件项目的特殊性 逻辑实体,具有抽象性 相互作用系统 变更 渐进明细 软件项目和日常运作区别 项目是一次性的，日常运作是重复进行的 项目是以目标为导向的，日常运作是通过效率和有效性体现的 项目是通过与项目经理及其团队工作完成的，而日常运作是职能式的线形管理 大量的变更管理，而日常运作则基本保持持续的连贯性的 软件是逻辑实体，不是具体的物理实体，具有抽象性 软件的开发受计算机系统的限制，对硬件系统有不同程度的依赖 软件具有复杂性特点，其开发成本昂贵，制约因素很多 实现项目目标的制约因素 工作范围 成本 进度计划 客户满意度 项目组合管理(Portfolio)、项目集(Programs)与项目(Project) 1.2项目管理与软件项目管理项目管理的定义项目管理是一系列的伴随着项目的进行而进 行的、目的是为了确保项目能够达到期望的 结果的一系列管理行为。 项目管理的主要内容管理职能角度：项目计划、组织、人事安排、控制顿号协调 软件开发项目管理定义软件项目管理是为了使软件项目能够按照‘预定的成本、进度、质量顺利完成，而对成本、人员、进度、质量、风险等进行分析和管理的活动。 软件开发项目管理软件危机 软件生产能力和业务发展需求不相适应的现象 就是弱的软件生产能力和强的业务发展需求之间的矛盾 软件开发项目管理的必要性无规则、混乱的开发状态，进度滞后，费用超支等失败的例子很多业务失败，合同纠纷，法律诉讼，客户投诉等困扰软件业。 软件项目管理的核心约束确保软件项目满足进度,成本等约束,提交高质量软件产品(范围) 1.3PMBOK与软件项目管理体系五个标准化过程 PMBOK 9个知识领域的关系![PMBOK 9个知识领域的关系](/img/软件项目管理/PMBOK 9个知识领域的关系.png)PMBOK 9 大过程领域![PMBOK 9 大过程领域](/img/软件项目管理/PMBOK 9 大过程领域.png) PMBOK 5 大过程组![PMBOK 5 大过程组](/img/软件项目管理/PMBOK 5 大过程组.png)1.4 敏捷项目管理敏捷模型敏捷宣言 - 4 价值 个体和互动 高于 流程和工具 可工作的软件 高于详尽的文档 客户合作 高于 合同谈判 响应变化 高于遵循计划 敏捷原则 我们最重要的目标，是通过持续不断地及早交付有价值的软件来使客户满意。 欣然面对需求变化，即使在开发后期也一样，为了客户的竞争优势，要通过敏捷过程来适应变化。 经常性地交付可以工作的饮件，比如间隔几个星期或一两个月就交付，交付的时间间隔越短越好。 业务人员和开发人员必须相互合作，项目中的每一天都不例外。 激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支持，辅以信任，从而达成目标。 不论团队内外，效果最好且效率最高的传递信息的方式，就是面对面的交流。 可以工作的软件是首要的进度度量标准。 敏捷过程提倡可持续的开发速度。责任人、开发者和用户要能够共同维持其不断稳定延续。 坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。 以简洁为本，它是极力减少不必要工作量的艺术。 最好的架构、需求和设计出自自组织团队。 团队定期地反思如何能提高成效，并依此调整自身的举止行为。 1.5 软件项目管理过程项目初始 项目确立 生存期 项目计划 范圉计划 成本计划 进度计划 质量计划 配署管理计划 团队计划 风险计划 合同计划 项目执行控制 集成计划执行控制 核心计划执行控制 辅助计划执行控制 项目结束1.6 软件项目生命期生命期六个周期 计划阶段 定义系统，确定用户的要求或总体研究目标，提出可行的方案，包括资源、成本、效益、进度等的实施计划。进行可行性分析并制定粗略计划。 需求分析阶段 确定软件的功能、性能、可靠性、接口标准等要求，根据功能要求进行数据流程分析，提出初步的系统逻辑模型，并据此修改项目实施计划。 软件设计阶段 它包括系统概要设计和详细设计。在概要设计中，要建立系统的整体结构，进行模块划分，根据要求确定接口。在详细设计中，要建立算法、数据结构和流程图。 编码阶段 把流程图翻译成程序，并对程序进行调试。 测试阶段 通过单元测试，检验模块内部的结构和功能；通过集成测试，把模块连接成系统，重点寻找接口上可能存在的问题；确认测试，即按照需求的内容逐项进行测试；系统测试，就是到实际的使用环境中进行测试。单元测试和集成测试由开发者自己完成，确认测试和系统测试则由用户参与完成。 运行维护阶段 它一般包括三类工作，为了修改错误而做的改正性维护；为了适应环境变化而做的适应性维护；为了适应用户新的需求而做的完善性维护，有时会成为二次开发，进入一个新的生命期，再从计划阶段开始。 简述: 概念（Concept）开发（Development）实施（Implementation）结束（Termination） 注意点 检查点(Check Point) 它指在规定的时间间隔内对项目进行检查，比较实际现状与计划之间的差异，并根据差异进行调整 里程碑(Mile Stone) 它是完成阶段性工作的标志，不同类型的项目里程碑不同 基线(Base Line) 它指一个(或一组)配置项在项目生命期的不同时间点上，通过正式评审而进入正式受控的一种状态 第 2 章 软件项确立2.1 概述1. 定义 合同是使卖方负有提供具体产品和服务的责任，买方负有为该产品和产品服务付款的责任的一种双方相互负有义务的协议。 合同定义了合同签署方的权利与义务，以及违背协议会造成的相应法律后果； 合同监督项目执行的各方履行其权利和义务，它是具有法律效力的文件；围绕合同，存在合同签署之前和合同签署之后的一系列工作。 2. 技术合同软件项目合同主要是技术合同 技术合同是法人之间、法人和公民之间、公民之间以技术开发、技术转让、技术咨询和技术服务为内容，明确相互权利义务关系所达成的协议； 技术合同有三种环境：需（甲）方环境、供（乙）方环境和内部环境；技术合同一般包括主合同和合同附件。 3. 技术合同内容 项目名称； 项目的技术内容、范围、形式和要求； 项目实施计划、进度、期限、地点和方式； 项目合同价款、报酬及其支付方式； 项目验收标准和方法； 各方当事人义务或协作责任； 技术成果归属和分享及后续改进的提供与分享规定； 技术保密事项； 风险责任的承担； 违约金或者损失赔偿额的计算方法、仲裁及其它。 4. 技术合同附件 系统的商务报价表； 系统的需求规格说明书； 项目的工程进度计划书； 技术服务承诺； 培训计划； 移交的用户文档和技术文档； 场地和环境准备要求； 测试与验收标准； 初验与终验报告样式范本； 工程实施的分工界面定义。 5. 合同生存周期 合同准备 合同签署 合同管理 合同终止 2.2 需方合同环境(甲方) 企业在需方合同环境下，关键要素是提供准确、清晰和完整的需求，选择合格的供方并对采购对象（采购对象包括产品服务、人力资源等）进行必要的验收。这个需求可能来自于企业内部的需要，也可能是在为客户开发的软件项目中的一部分，通过寻找合适的软件开发商，将部分软件外包给其他的开发商。 合同准备 招标书定义(采购需求定义) 启动一个项目主要是由于存在一种需求，招标书定义主要是需方的需求定义，也就是甲方(买方)定义采购的内容。 招标书主要内容可分为三大部分：程序条款、技术条款、商务条款。 包含下列主要九项内容：1、招标邀请函;2、投标人须知;3、招标项目的技术要求及附件;4、投标书格式;5、投标保证文件;6、合同条件(合同的一般条款及特殊条款);7、技术标准、规范;8、投标企业资格文件;9、合同格式。 流程如下： 需方申请 需求定义 商务条件确定 验收标准确定 资料汇集 采购需求认可 编写招标文件 招标文件 供方选择 招标文件确定后，就可以通过招标的方式选择供方（乙方或者卖方）。 流程如下： 招标文件 招标 手机供方的建议书 评定供方 最终供方确定 供方名单 建议书 合同文本准备 如果需方选择了合适的供方（软件开发商），需方应该与供方（软件开发商）签订一个具有法律效力的合同；签署合同之前需要起草一份合同文本。 采购资料 合同草案指定 合同草案评审 合同草案修订 合同草案确定 合同草案 合同签署 合同签署过程就是正式签署合同，使之成为具有法律效力的文件；同时，根据签署的合同，分解出合同中需方(甲方)的任务，并下达任务书，指派相应的项目经理负责相应的过程。 合同草案 谈判日程确定 合同草案提交 合同条款协商 合同签署文本确定 合同签署文本审阅 合同签署 合同签署文本 任务书下达 合同管理 对于企业处于需方(甲方)的环境，合同管理是需方对供方(乙方)执行合同的情况进行监督的过程， 主要包括：对需求对象（采购对象）的验收 验收过程是需方对供方交付的产品或服务进行验收检验，以保证它满足合同条款的要求。对违约事件处理 在合同的执行过程中，如果供方发生与合同要求不一致的问题，导致违约事件，需要执行违约事件处理过程。 验收过程 违约处理 合同终止 当项目满足结束的条件，项目经理或者合同管理者应该及时宣布项目结束，终止合同的执行，通过合同终止过程告知各方合同终止 过程 合同 合同相关文档归档 合同终止通知 项目执行总结 项目总结 2.3 供方合同环境(乙方) 企业在供方(乙方)合同环境下，关键要素是了解清楚需方（甲方）的要求并判断企业是否有能力来满足这些需求。作为软件开发商，更多担任的是供方的角色。 合同准备 项目分析 项目分析是供方分析用户的项目需求，并据此开发出—初步的项目计划，作为下一步能力评估和可行性分析之用。 项目竞标能力评估；可行性分析；参加竞标。 合同文本准备 一般是需方(甲方)提供合同的框架结构，并起草主要内容，供方(乙方)提供意见。 合同签署 供方的合同签署过程也类似于需方的合同签署过程，但是这个阶段对于供方的意义是重大的，它标志着一个软件项目的有效开始，这个时候，应该正式确定供方的项目经理。 这里需要说明的是项目任务书，项目任务书明确项目的目标、必要的约束，同时授权给项目经理。 项目任务书是项目正式开始的标志，同时也是对项目经理有效授权的依据。项目经理需要对这个任务书进行确认。 具体活动描述可以参见需方的合同签署过程。 合同管理 合同跟踪管理过程 合同修改控制过程 违约事件处理过程 产品交付过程 产品维护过程 合同终止 在合同终止过程中，供方应该配合需方的工作，包括：项目的验收、双方认可签字、总结项目的经验教训、获取合同的最后款项、开具相应的发票、获取需方的合同终止的通知、将合同相关文件归档。 过程 合同 合同相关文档归档 合同终止通知 项目执行总结 项目总结 2.4 企业内部的合同环境 企业内部项目实施管理的核心是确定任务范围和确保相关各方进行有效的配合，这可以通过相关各方之间的“协议”来保证，此处“协议”可视为“合同”。 企业内部项目“合同”无特别的商业约束。 总结 软件项目技术合同的执行过程可以划分为四个阶段，即：合同准备、合同签署、合同管理与合同终止。 针对企业在不同合同环境中承担的不同角色，又可将合同管理分为需方合同管理、供方合同管理及内部合同管理。 作为软件企业，一般是处于供方(乙方)的角色，因此，软件企业的项目经理应该重点掌握供方(乙方)的合同管理过程。 合同标志一个项目的真正开始，通过项目任务单明确项目经理，从此，项目经理可以真正行使相应的职责和权力。 第 3 章 软件生存期模型3.1 CMM 和 ISO9000CMM 为了保证软件产品的质量，1991年美国卡内基·梅隆大学软件工程研究所（CMU/SEI）将软件过程成熟度框架进化为软件能力成熟度模型（Capability Maturity Model For Software，简称SW-CMM），并发布了最早的SW-CMM 1.0版。SW-CMM为软件企业的过程能力提供了一个阶梯式的进化框架，阶梯共有五级。 (1)初始级(initial)。工作无序，项目进行过程中常放弃当初的计划。管理无章法，缺乏健全的管理制度。开发项目成效不稳定，项目成功主要依靠项目负责人的经验和能力，他一但离去，工作秩序面目全非。 (2)可重复级(Repeatable)。管理制度化，建立了基本的管理制度和规程，管理工作有章可循。初步实现标准化，开发工作比较好地按标准实施。变更依法进行，做到基线化，稳定可跟踪，新项目的计划和管理基于过去的实践经验，具有重复以前成功项目的环境和条件。 (3)已定义级(Defined)。开发过程，包括技术工作和管理工作，均已实现标准化、文档化。建立了完善的培训制度和专家评审制度，全部技术活动和管理活动均可控制，对项目进行中的过程、岗位和职责均有共同的理解。 (4)已管理级(Managed)。产品和过程已建立了定量的质量目标。开发活动中的生产率和质量是可量度的。已建立过程数据库。已实现项目产品和过程的控制。可预测过程和产品质量趋势，如预测偏差，实现及时纠正。 (5)优化级(Optimizing)。可集中精力改进过程，采用新技术、新方法。拥有防止出现缺陷、识别薄弱环节以及加以改进的手段。可取得过程有效性的统计数据，并可据进行分析，从而得出最佳方法 概念描述 软件过程 是指人们用于开发和维护软件及其相关产品的一系列活动、方法、实践和革新。 软件开发过程管理 是指在软件开发过程中，除了先进技术和开发方法外，还有一整套的管理技术。 软件过程改进 是针对软件生产过程中会对产品质量产生影响的问题而进行的，它的直接结果是软件过程能力的提高。现在常见的软件过程改进方法：ISO 9000，SW-CMM和由多种能力模型演变而来的CMMI。 KP除第一级外，SW-CMM的每一级都是按完全相同的结构组成的。每一级包含了实现这一级目标的若干关键过程域（KPA），每个KPA进一步包含若干关键实施活动（KP），无论哪个KPA，它们的实施活动都统一按六个公共属性进行组织，即每一个KPA都包含六类KP： 目标 实施保证 实施能力 执行活动 度量分析 实施验证 CMMI 由于不同领域能力成熟度模型存在不同的过程改进，重复的培训、评估和改进活动以及活动不协调等一些问题。于是由美国国防部出面，美国卡内基·梅隆大学软件工程研究所（CMU/SEI）于2001年12月发布的CMMI 1.1版本包括四个领域：软件工程（SW）、系统工程（SE）、集成的产品和过程开发（IPPD）、采购（SS）。 CMMI有两种不同的实施方法 连续式－－主要是衡量一个企业的项目能力 阶段式－－主要是衡量一个企业的成熟度 CMMI的五个台阶 完成级 管理级 定义级 量化管理级 优化级 每一个台阶都是上面一阶台阶的基石。要上高层台阶必须首先踏上较低一层台阶。 ISO9000 所谓“ISO9000”不是指一般意义上的一个质量保证标准，而是一族系列标准的统称。 作用 强化品质管理，提高企业效益；增强客户信心，扩大市场份额； 获得了国际贸易“通行证”，消除了国际贸易壁垒； 节省了第二方审核的精力和费用； 在产品品质竞争中永远立于不败之地； 有效地避免产品责任； 有利于国际间的经济合作和技术交流。 三者之间的比较 选择SW-CMM还是CMMI的考虑 实施企业的业务特点。 实施企业对过程改进的熟悉程度。 实施企业对过程改进项目的预算。 实施企业是否可以使用阶段式的演进路线。 实施CMM与CMMI可以平滑的转换。 ISO9001与CMM的关系 ISO9001和CMM既有区别又相互联系，两者不可简单地互相替代。 取得ISO9001认证并不意味着完全满足CMM某个等级的要求。 取得CMM第2级(或第3级)不能笼统地认为可以满足ISO9001的要求。 3.2 生存期的项目特征 方法(Approach) 项目需求 开发活动 产品交付 目标 预测型(Predictive) 稳定（Fixed） 对整个项目执行一次 只提交一次 管理成本 迭代型（Iterative） 不断变化的（Dynamic） 不断重复直到正确 只提交一次 获得正确的解决方案 增量型（Incremental） 不断变化的 每次增量活动只执行一次 多次提交小版本 速度 敏捷型（Agile） 不断变化的 不断重复一些活动直到正确 多次提交小版本 获得用户肯定 预测生存期模型预测模型： 项目具有高确定性，有很明确的绣球，项目活动通常以顺序方式执行(无反馈)。 流程： Analyze(分析)–&gt;Design(设计)–&gt;Build–&gt;Test–&gt;Deliver 如瀑布模型，V模型。 迭代生存期模型迭代模型： 是通过连续的原型和概念验证来改进产品或结果，每一个新的原型都能带来新的相关反馈和团队的见解。 迭代模型有利于识别和减少项目的不确定性，也称为原型模型。(优点：可应对需求变化，缺点：时间长) 增量生存期模型增量模型： 一个增量一个增量的开发过程，每个增量是一个交付成果。即增量模型向客户提交完成的可交付的成功，让用户可以立即使用。 敏捷生存期模型敏捷模型是符合《敏捷宣言》原则的模型，客户满意度将随着有价值产品的早期交付和持续交付不断提升。此外，功能性的、提供价值的增量可交付成果是衡量进展的主要尺度。为了适应更频繁的变更，更频繁底交付项目价值，敏捷模型结合了迭代和增量模型的方法。 在敏捷开发环境中，团队假设需求会发生变更。迭代和增量方法能够提供反馈，一遍改善项目下一部分的计划。在敏捷项目中，增量交付会发现隐藏或误解的需求。 敏捷方法是一个囊括了各种框架和方法的涵盖性术语。 Scrum模型是敏捷模型的代表。 敏捷是多种方法的统称，如Scrum、XP、Scrumban、OpenUp、看板方法、精益(lean)、持续交付、devOps等。 3.2 传统软件开发生命周期模型 软件从需求确定、设计、开发、测试直至投入使用，并在使用中不断地修改、增补和完善，直至被新的系统所替代而停止该软件的使用的全过程。 可划分为以下子阶段 1.可行性研究 2.需求分析和问题定义 3.总体设计 4.详细设计 5.编码（实现） 6.软件测试、运行维护 据此相继产生了瀑布模型、螺旋模型、进化模型、原型模型、增量模型等。本节分别对这几种传统的软件开发生命周期模型予以介绍。 1) 瀑布模型生命周期 系统需求 软件需求 分析 设计 编码 测试 运行 使用条件 文档驱动的模型 阶段间具有顺序性和依赖性 项目开发周期较长 实际项目很少按照该模型给出的顺序进行 客户必须能够完整、正确和清晰地表达他们的需求 优点容易理解，管理成本低；强调开发的阶段性早起计划及需求调查和产品测试。软件项目较小 2) 快速原型模型 特点 在需求定义之前，需要快速构建一个系统 先看界面，然后实现功能，根据构建系统的优缺点，用户给开发人员提出反馈意见 根据反馈意见修改软件需求规格，以便系统可以更正确地反映用户的需求 减少各种假设以及风险 缺点 为了尽快完成原型，开发者没有考虑整体软件的质量和changing的可维护性，系统结构通常较差 可能混淆原型系统和最终系统 额外的开发费用 3) 增量模型 优点 为避免一次性投资太多带来的风险 融合了瀑布模型和原型的迭代特征。 每一个增量均发布一个可操作产品。 较短的时间向用户提交有用的功能 逐步增加产品的功能 项目失败风险低 优先级最高的服务首先交付，意味着软件马上就能使用 使用条件 如果没有对用户的变更要求进行规划，那么产生的初始增量可能会造成后来增量的不稳定； 如果需求不像早期思考的那样稳定和完整，那么一些增量就可能需要重新开发； 管理发生的成本、进度和配置的复杂性，可能会超出组织的能力。 样例Word 字处理软件 教务系统 4）进化模型这个模型可看作是重复执行的多个瀑布模型。 5) 螺旋模型 螺旋模型将瀑布模型和演化模型结合起来，加入了两种模型均忽略的风险分析，弥补了这两种模型的不足。 使用条件 基于风险驱动的开发模型, 使用原型法或其它方法来尽量降低风险。 适用于需求不明确的大规模软件项目 6) V模型 使用条件甲方提供了详细，准确的需求文档，我们的解决方案也是很明确，且安全性要求非常的严格. 3.3 扩展的软件开发生命周期模型极限模型 2001年，为了避免许多公司的软件团队陷入不断增长的过程泥潭，一批业界专家一起概括出了一些敏捷开发过程的方法：SCRUM，Crystal，特征驱动软件开发（Feature Driven Development，简称FDD），自适应软件开发（Adaptive Software Development，简称ASD），以及最重要的极限编程（eXtreme Programming,简称XP）。 极限编程将开发阶段的4个活动（分析、设计、编码和测试）混合在一起，在全过程中采用迭代增量开发、反馈修正和反复测试。 核心思想 交流（Communication） 简单（Simplicity ） 反馈（Feedback） 进取（Aggressiveness） 优缺点 优点 采用简单计划策略，不需要长期计划和复杂模型，开发周期短； 在全过程采用迭代增量开发、反馈修正和反复测试的方法，能够适应用户经常变化的需求。 缺点 目前主要在小规模项目上应用并取得成功，但是否适用于中等规模或大规模软件产品，需慎重考虑； 由于这个模型较新产品交付后维护成本是否降低，不能确定；对编码人员的经验要求高 Rational统一过程 （RUP） 用例驱动Concise, simple, and understandable 以体系结构为中心Effective basis for large-scale reuse 增量和迭代开发基于风险前驱的原则，渐进地展开分析、设计及其相关活动，每个迭代都会提供一次验证和调整模型机会，推动软件质量的提升。 Scrum模型2层的项目规划，迭代式的软件开发过程，4个管理会议。 2层的项目规划 体现为远期的项目计划和近期的计划，基于远粗近细的原则 远期计划和近期计划通过产品订单和冲刺订单体现 产品订单是所有需求的唯一来源，所有工作来自于它，开始阶段模糊，随着时间推移越来越明确。最高优先等级需求就是 当前冲刺订单，冲刺订单是当前迭代完成的任务清单。 迭代式的开发 通过将整个软件交付过程分为多个迭代周期，一个迭代就是一个冲刺(Sprint)。 每个迭代周期2-4周，迭代内任务有详细的分解估算，可以分解到小时，迭代结束时提交一个运行版本。 4个管理会议 XP(eXtreme Programming) 极限编程模型XP极限编程是由Kent Beck提出的一套针对业务需求和软件开发时间的规划。 13个最佳实践 整体实践：Whole Team，Customer Test，Small Releases(小版本)，Planing Game 开发团队实践：Collective Ownership，Coding Standard(编程标准)，Continuous Integration(持续集成)，Metaphor， Sustainable Pace(恒定速度) 开发者实践：Test Driven，Development，Pair Programming，Simple Design，Refactoring(重构) 精益模型(lean)： 提倡持续不断的改进，减少流程中浪费。持续交付： 经典的敏捷软件开发延伸能够以较短周期完成需求的小粒度频繁交付。(持续集成，持续部署，持续交付) 持续集成：将个人代码像整体部分交付，以便尽早发现个人开发部分的问题 持续部署：集成的代码尽快向可运行的环境来交付，以便尽早测试 持续交付：尽快向客户交付以便尽早发现生产环境中存在的问题 由持续交付演变成DevOps(Development和Operations的组合)融合一系列基本原则和实践的方法论。 全程敏捷思维(开发段和运维端工作紧密合作)开发人员与运维人员的差异：开发人员希望尽快提交产品，运维端希望产品更加合理化，高性能，高可靠性，减少运维成本。 DevOps： 是一组过程，方法与系统的统称，用于促进开发，技术运营和质量保障(QA)部门之间的沟通，协作与整合。3.4 质量计划软件质量 是“所有描述计算机软件优秀程度的特性的组合” 软件质量度量模型有三层组成 质量特性 质量子特性 度量 质量特性 功能性 可靠性 易使用性 高效性 可维护性 可移植性 质量规划 识别哪些质量标准适用于软件项目，并确定如何满足这些标准的需求 质量体系 指为保证产品，过程或服务质量，满足规定(或潜在)的要求，有组织机构，职责，程序，活动，能力和资源等构成的有机整体 质量手册 描述企业质量体系的文件 质量计划 质量管理的第一过程域 质量计划内容 项目实施总体目标 质量 时间 成本 项目分类 质量倾斜型体系 工期倾斜型体系 成本倾斜型体系 软件生命周期三大阶段 软件定义 软件开发 软件使用和维护 质量计划的编写质量控制 检测 控制 第 4 章 软件需求管理第 5 章 软件项目任务分解第 6 章 软件项目成本计划","categories":[{"name":"软件项目管理","slug":"软件项目管理","permalink":"http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"软件项目管理","slug":"软件项目管理","permalink":"http://example.com/tags/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}]},{"title":"day02","slug":"day02","date":"2021-09-01T13:38:46.975Z","updated":"2021-09-04T15:26:39.626Z","comments":true,"path":"2021/09/01/day02/","link":"","permalink":"http://example.com/2021/09/01/day02/","excerpt":"","text":"今日内容()","categories":[],"tags":[]},{"title":"day01","slug":"day01","date":"2021-09-01T13:37:50.327Z","updated":"2021-09-04T15:26:38.794Z","comments":true,"path":"2021/09/01/day01/","link":"","permalink":"http://example.com/2021/09/01/day01/","excerpt":"","text":"今日内容","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-09-01T11:40:45.300Z","updated":"2021-09-01T11:40:45.300Z","comments":true,"path":"2021/09/01/hello-world/","link":"","permalink":"http://example.com/2021/09/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"软件项目管理","slug":"软件项目管理","permalink":"http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"软件项目管理","slug":"软件项目管理","permalink":"http://example.com/tags/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}]}